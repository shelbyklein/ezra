version: '3.8'

# ========================================
# Ezra Docker Compose Configuration
# ========================================
# 
# This file consolidates all deployment scenarios using Docker Compose profiles.
# 
# Available profiles:
#   - default: Basic setup with SQLite (no profile needed)
#   - postgres: Use PostgreSQL instead of SQLite
#   - pgadmin: Include pgAdmin for database management (requires postgres)
#   - backup: Enable automated backups
#   - production: Full production setup with all features
#   - alt-ports: Use alternative ports (frontend: 3006, backend: 5002)
#
# Usage examples:
#   Basic setup:         docker-compose up -d
#   With PostgreSQL:     docker-compose --profile postgres up -d
#   Production setup:    docker-compose --profile production up -d
#   Alternative ports:   docker-compose --profile alt-ports up -d
#
# ========================================

services:
  # ================================
  # BACKEND SERVICE
  # ================================
  backend:
    build:
      context: ../
      dockerfile: backend/Dockerfile
    container_name: ezra-backend
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-6001}:6001"
    environment:
      # Core Configuration
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 6001
      
      # Authentication (REQUIRED - change these!)
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-here-change-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      ADMIN_SECRET: ${ADMIN_SECRET:-idontknow}
      
      # AI Integration (REQUIRED for AI features)
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-your-anthropic-api-key-here}
      
      # Database Configuration
      DATABASE_URL: ${DATABASE_URL:-/app/data/ezra.db}
      
      # Frontend URL for CORS
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3005}
      
      # API Configuration
      API_RATE_LIMIT_WINDOW_MS: ${API_RATE_LIMIT_WINDOW_MS:-900000}
      API_RATE_LIMIT_MAX: ${API_RATE_LIMIT_MAX:-100}
      
      # File Upload Settings
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10485760}
      UPLOAD_DIR: /app/uploads
    volumes:
      - ../data:/app/data              # Database storage
      - ../uploads:/app/uploads        # User uploads
      - ../logs:/app/logs              # Application logs
    networks:
      - ezra-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:6001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ================================
  # BACKEND SERVICE (Alternative Ports)
  # ================================
  backend-alt:
    extends: backend
    container_name: ezra-backend-alt
    ports:
      - "5002:6001"
    environment:
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3006}
    profiles:
      - alt-ports

  # ================================
  # FRONTEND SERVICE
  # ================================
  frontend:
    build:
      context: ../
      dockerfile: frontend/Dockerfile
    container_name: ezra-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3005}:80"
    environment:
      VITE_API_URL: ${VITE_API_URL:-/api}
    depends_on:
      - backend
    networks:
      - ezra-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # FRONTEND SERVICE (Alternative Ports)
  # ================================
  frontend-alt:
    extends: frontend
    container_name: ezra-frontend-alt
    ports:
      - "3006:80"
    depends_on:
      - backend-alt
    profiles:
      - alt-ports

  # ================================
  # POSTGRESQL SERVICE
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: ezra-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-ezra_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your-postgres-password}
      POSTGRES_DB: ${POSTGRES_DB:-ezra_db}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - ezra-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ezra_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - postgres
      - pgadmin
      - production

  # ================================
  # PGADMIN SERVICE
  # ================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ezra-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@ezra.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    depends_on:
      - postgres
    networks:
      - ezra-network
    profiles:
      - pgadmin
      - production

  # ================================
  # BACKUP SERVICE (SQLite)
  # ================================
  backup-sqlite:
    image: alpine:latest
    container_name: ezra-backup-sqlite
    restart: unless-stopped
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        apk add --no-cache sqlite
        BACKUP_SCHEDULE="${BACKUP_SCHEDULE:-0 2 * * *}"
        BACKUP_RETENTION_DAYS="${BACKUP_RETENTION_DAYS:-7}"
        
        # Install cron
        apk add --no-cache dcron
        
        # Create backup script
        cat > /backup.sh << 'EOF'
        #!/bin/sh
        echo "Running backup at $(date)"
        sqlite3 /app/data/ezra.db ".backup /backups/ezra-$(date +%Y%m%d-%H%M%S).db"
        find /backups -name "ezra-*.db" -mtime +${BACKUP_RETENTION_DAYS} -delete
        EOF
        chmod +x /backup.sh
        
        # Setup cron
        echo "${BACKUP_SCHEDULE} /backup.sh" | crontab -
        
        # Run initial backup
        /backup.sh
        
        # Start cron daemon
        crond -f
    volumes:
      - ../data:/app/data:ro           # Read-only access to database
      - ../backups:/backups            # Backup storage
    networks:
      - ezra-network
    profiles:
      - backup

  # ================================
  # BACKUP SERVICE (PostgreSQL)
  # ================================
  backup-postgres:
    image: postgres:15-alpine
    container_name: ezra-backup-postgres
    restart: unless-stopped
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD:-your-postgres-password}
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        BACKUP_SCHEDULE="${BACKUP_SCHEDULE:-0 2 * * *}"
        BACKUP_RETENTION_DAYS="${BACKUP_RETENTION_DAYS:-7}"
        
        # Install cron
        apk add --no-cache dcron
        
        # Create backup script
        cat > /backup.sh << 'EOF'
        #!/bin/sh
        echo "Running backup at $(date)"
        pg_dump -h postgres -U ${POSTGRES_USER:-ezra_user} ${POSTGRES_DB:-ezra_db} | gzip > /backups/ezra-$(date +%Y%m%d-%H%M%S).sql.gz
        find /backups -name "ezra-*.sql.gz" -mtime +${BACKUP_RETENTION_DAYS} -delete
        EOF
        chmod +x /backup.sh
        
        # Setup cron
        echo "${BACKUP_SCHEDULE} /backup.sh" | crontab -
        
        # Wait for postgres to be ready
        until pg_isready -h postgres -U ${POSTGRES_USER:-ezra_user}; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        
        # Run initial backup
        /backup.sh
        
        # Start cron daemon
        crond -f
    volumes:
      - ../backups:/backups
    networks:
      - ezra-network
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - production

  # ================================
  # NGINX REVERSE PROXY (Optional)
  # ================================
  nginx:
    image: nginx:alpine
    container_name: ezra-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx/ezra.conf:/etc/nginx/conf.d/default.conf:ro
      - ../ssl:/etc/letsencrypt:ro
    depends_on:
      - frontend
      - backend
    networks:
      - ezra-network
    profiles:
      - nginx
      - production

  # ================================
  # NGINX SSL FOR DEVELOPMENT
  # ================================
  nginx-ssl:
    image: nginx:alpine
    container_name: ezra-nginx-ssl
    restart: unless-stopped
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx-ssl.conf:/etc/nginx/conf.d/default.conf:ro
      - ../ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - ezra-network
    profiles:
      - ssl

networks:
  ezra-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local